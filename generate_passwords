import itertools

def generate_passwords(words):
    # Generate all unique 20-character combinations of words without reusing any word in a single combination
    unique_passwords = set()

    # Use a helper function to recursively generate combinations
    def generate_combinations(current_combination, remaining_words):
        if len(unique_passwords) >= 1000:
            return
        if len(''.join(current_combination)) == 20:
            unique_passwords.add(''.join(current_combination))
            return
        for i, word in enumerate(remaining_words):
            if len(''.join(current_combination) + word) <= 20:
                generate_combinations(current_combination + [word], remaining_words[:i] + remaining_words[i+1:])
    
    generate_combinations([], words)
    
    return list(unique_passwords)

# Read wordlist.txt file
with open('C:\\Python312\\Word Gen\\wordlist.txt', 'r') as f:
    words = [line.strip() for line in f]

# Generate unique 20-character passwords
passwords = generate_passwords(words)

# Only keep the first 1000 unique passwords
passwords = passwords[:1000]

# Print the first 1000 unique 20-character passwords
for password in passwords:
    print(password)

# Save the passwords to a file
with open('passwords.txt', 'w') as f:
    for password in passwords:
        f.write(password + '\n')

# Debugging (Optional)
# Check the Word List
# print("First 10 words:", words[:10])

# Check the Password Generation
# print("First 10 combinations:", passwords[:10])

# Check the Length Filtering
# print("First 10 valid passwords:", passwords[:10])

# print("The first 100 passwords have been written to passwords.txt")
